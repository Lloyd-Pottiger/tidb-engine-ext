name: Build

on:
  push:
    branches:
      - "raftstore-proxy-6.0-try" # Build the base branch so that cache can be used for PRs
  pull_request:
    branches:
      - "raftstore-proxy*"

jobs:
  proxy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: cache cargo env
        id: cache-cargo
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: install rust
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- --no-modify-path --default-toolchain none -y
          export PATH=~/.cargo/bin/:$PATH
          rustup self update && rustup set profile minimal && rustup default $(cat "rust-toolchain")
      - name: cache build result
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: |
            target/
          key: ${{ runner.os }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: format check
        run: |
          cd ${{github.workspace}}
          make gen_proxy_ffi
          GIT_STATUS=$(git status -s) && if [[ ${GIT_STATUS} ]]; then echo "Error: found illegal git status"; echo ${GIT_STATUS}; [[ -z ${GIT_STATUS} ]]; fi
          cargo fmt -- --check >/dev/null
      - name: test
        run: |
          # export RUSTC_WRAPPER=~/.cargo/bin/sccache
          # make test
          # make debug
          export RUST_BACKTRACE=full
          cargo check
          cargo test --package tests --test failpoints cases::test_normal
          cargo test --package tests --test failpoints cases::test_bootstrap
          cargo test --package tests --test failpoints cases::test_compact_log
          cargo test --package tests --test failpoints cases::test_early_apply
          cargo test --package tests --test failpoints cases::test_encryption
          cargo test --package tests --test failpoints cases::test_pd_client
          cargo test --package tests --test failpoints cases::test_pending_peers
          cargo test --package tests --test failpoints cases::test_transaction
          cargo test --package tests --test failpoints cases::test_cmd_epoch_checker
          cargo test --package tests --test failpoints cases::test_disk_full
          cargo test --package tests --test failpoints cases::test_snap
          cargo test --package tests --test failpoints cases::test_merge
          cargo test --package tests --test failpoints cases::test_import_service
          cargo test --package tests --test failpoints cases::test_proxy_replica_read
